/*
 * modbus_rtu_protocol.hpp
 *
 *  Created on: Jun 22, 2022
 *      Author: r2h
 */

#ifndef SERIAL_PORT_DEVICE_PUBLIC_MODBUS_RTU_MODBUS_RTU_PROTOCOL_HPP_
#define SERIAL_PORT_DEVICE_PUBLIC_MODBUS_RTU_MODBUS_RTU_PROTOCOL_HPP_

#include <pthread.h>
#include "../../../common/data_type.hpp"
#include "../../../common/exception.hpp"
#include "../../port.hpp"
#include "../../../eth_port_server/memory/generic_shared_memory.hpp"
#include "../../iprotocol.hpp"

using namespace common;
using namespace ethernet_port_server;

namespace serial_port_device
{

#define MODBUS_RTU_ADU_SIZE_IN_BYTE (256)
#define MODBUS_RTU_PDU_SIZE_IN_BYTE (253)
#define READ_HOLDINGS_MAX_IN_REGISTER (125)
#define WRITE_MULTIPLES_MAX_REGISTER (123)
#define RW_READ_REGISTERS_MAX_IN_REGISTER (125)
#define RW_WRITE_REGISTERS_MAX_IN_REGISTER (121)

typedef r2h_uint16 modbus_rtu_register;

typedef enum class MODBUS_RTU_FUNC_CODE : r2h_byte
{
	READ_HOLDING_REGISTERS = 0x03,
	WRITE_MULTIPLE_REGISTERS = 0x10,
	READ_WRITE_REGISTERS = 0x17,
	EXCEPTION_MASK = 0x80,
}MODBUS_RTU_FUNC_CODE_T;

typedef struct modbus_rtu_pdu
{
	union
	{
		r2h_byte raw[MODBUS_RTU_PDU_SIZE_IN_BYTE];

		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_uint16					offset_in_register;
			r2h_uint16					size_in_register;
		}__attribute__((packed)) read_holdings_request;
		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_byte					size_in_byte;
		}__attribute__((packed)) read_holdings_response_header;
		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_byte					size_in_byte;
			modbus_rtu_register			data[READ_HOLDINGS_MAX_IN_REGISTER];
		}__attribute__((packed)) read_holdings_response;

		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_uint16					offset_in_register;
			r2h_uint16					size_in_register;
			r2h_byte					size_in_byte;
		}__attribute__((packed)) write_multiple_request_header;
		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_uint16					offset_in_register;
			r2h_uint16					size_in_register;
			r2h_byte					size_in_byte;
			modbus_rtu_register			data[WRITE_MULTIPLES_MAX_REGISTER];
		}__attribute__((packed)) write_multiple_request;
		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_uint16					offset_in_register;
			r2h_uint16					size_in_register;
		}__attribute__((packed)) write_multiple_response;

		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_uint16					read_offset_in_register;
			r2h_uint16					read_size_in_register;
			r2h_uint16					write_offset_in_register;
			r2h_uint16					write_size_in_register;
			r2h_byte					size_in_byte;
		}__attribute__((packed)) read_write_registers_request_header;
		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_uint16					read_offset_in_register;
			r2h_uint16					read_size_in_register;
			r2h_uint16					write_offset_in_register;
			r2h_uint16					write_size_in_register;
			r2h_byte					size_in_byte;
			modbus_rtu_register			data[RW_WRITE_REGISTERS_MAX_IN_REGISTER];
		}__attribute__((packed)) read_write_registers_request;
		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_byte					size_in_byte;
		}__attribute__((packed)) read_write_registers_response_header;
		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_byte					size_in_byte;
			modbus_rtu_register			data[RW_READ_REGISTERS_MAX_IN_REGISTER];
		}__attribute__((packed)) read_write_registers_response;

		struct
		{
			MODBUS_RTU_FUNC_CODE_T		code;
			r2h_byte					exception;
		}__attribute__((packed)) exception_response;
	};
}__attribute__((packed)) modbus_rtu_pdu_t;

typedef struct modbus_rtu_adu
{
	union
	{
		r2h_byte 						raw[MODBUS_RTU_ADU_SIZE_IN_BYTE];
		struct
		{
			r2h_byte					slave_addr;
			modbus_rtu_pdu_t 			pdu;
			r2h_byte					crc_lo;
			r2h_byte					crc_hi;
		}__attribute__((packed));
	};
}__attribute__((packed)) modbus_rtu_adu_t;


class ModbusRtuProtocol : public IProtocol
{
public:
	ModbusRtuProtocol(Port *port, pthread_mutex_t *pMutex);
	ModbusRtuProtocol(const ModbusRtuProtocol&) = delete;
	ModbusRtuProtocol(ModbusRtuProtocol&&) = delete;

	virtual ~ModbusRtuProtocol();

	r2h_byte ReadHoldings(r2h_byte addr, r2h_uint16 offset, r2h_uint16 size, r2h_uint16* pData, r2h_int32 wtimeout, r2h_int32 rtimeout, bool isLittleEndianCPU = true);
	r2h_byte WriteMultiples(r2h_byte addr, r2h_uint16 offset, r2h_uint16 size, const r2h_uint16* pData, r2h_int32 wtimeout, r2h_int32 rtimeout, bool isLittleEndianCPU = true);
	r2h_byte ReadWriteRegisters(r2h_byte addr, r2h_uint16 writeoffset, r2h_uint16 writesize, const r2h_uint16* pWriteData,
								r2h_uint16 readoffset, r2h_uint16 readsize, r2h_uint16* pReadData,
								r2h_int32 wtimeout, r2h_int32 rtimeout, bool isLittleEndianCPU = true);
	r2h_byte ReadHoldings(r2h_byte addr, r2h_uint16 offset, r2h_uint16 size, GenericSharedMemory &sharedMem, r2h_uint16 start, r2h_int32 wtimeout, r2h_int32 rtimeout, bool isLittleEndianCPU = true);
	r2h_byte WriteMultiples(r2h_byte addr, r2h_uint16 offset, r2h_uint16 size, const GenericSharedMemory &sharedMem, r2h_uint16 start, r2h_int32 wtimeout, r2h_int32 rtimeout, bool isLittleEndianCPU = true);
	r2h_byte ReadWriteRegisters(r2h_byte addr,
								r2h_uint16 writeoffset, r2h_uint16 writesize, const GenericSharedMemory &writeMem, r2h_uint16 writememstart,
								r2h_uint16 readoffset, r2h_uint16 readsize, GenericSharedMemory &readMem, r2h_uint16 readmemstart,
								r2h_int32 wtimeout, r2h_int32 rtimeout, bool isLittleEndianCPU = true);
	virtual SERIAL_PORT_DEVICE_MODEL_T CompatibleModel();
private:
	modbus_rtu_adu_t __adu;
	modbus_rtu_register __temp[MODBUS_RTU_ADU_SIZE_IN_BYTE / sizeof(modbus_rtu_register)];
	Port *__port;
	pthread_mutex_t __mutex;
	pthread_mutex_t* __mutex_ptr;
	bool __internal_mutex;
	static constexpr r2h_byte __CRC_TABLE_HI[256] {
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40 };
	static constexpr r2h_byte __CRC_TABLE_LO[256] = {
		0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
		0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
		0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
		0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
		0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
		0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
		0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
		0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
		0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
		0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
		0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
		0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
		0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
		0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
		0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
		0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
		0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
		0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
		0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
		0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
		0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
		0x41, 0x81, 0x80, 0x40 };
	static void __crc(r2h_byte *pData, r2h_uint16 length, r2h_byte* crcLo, r2h_byte* crcHi);
	r2h_byte __recv_adu(r2h_int32 pduLen, r2h_int32 rtimeout);
	static r2h_uint16 __swap_byte_order(r2h_uint16 v);

	static constexpr r2h_int32 __READ_HOLDINGS_RSQ_FRAME_LEN = 1 + sizeof(__adu.pdu.read_holdings_request) + 2;
	static constexpr r2h_uint16 __READ_HOLDING_RSQ_CRC_LEN = 1 + sizeof(__adu.pdu.read_holdings_request);
	static constexpr r2h_uint16 __EXCEPTION_RSP_CRC_LEN = 1 + sizeof(__adu.pdu.exception_response);
};

inline r2h_uint16 ModbusRtuProtocol::__swap_byte_order(r2h_uint16 v)
{
	return v >> 8 | ((r2h_uint16)(v << 8));
}

}
#endif /* SERIAL_PORT_DEVICE_PUBLIC_MODBUS_RTU_MODBUS_RTU_PROTOCOL_HPP_ */
